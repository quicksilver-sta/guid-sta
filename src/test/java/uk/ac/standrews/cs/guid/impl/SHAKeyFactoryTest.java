package uk.ac.standrews.cs.guid.impl;

import org.junit.Test;
import org.testng.AssertJUnit;
import uk.ac.standrews.cs.guid.*;
import uk.ac.standrews.cs.guid.exceptions.GUIDGenerationException;
import uk.ac.standrews.cs.guid.impl.keys.KeyImpl;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.AssertJUnit.assertNotSame;

/**
 * @author Simone I. Conte "sic2@st-andrews.ac.uk"
 */
public class SHAKeyFactoryTest {

    @Test
    public void shaHex() throws GUIDGenerationException {

        KeyImpl guid = (KeyImpl) SHAKeyFactory.generateKey(ALGORITHM.SHA1, "abc".getBytes());
        assertEquals(guid.toString(), "a9993e364706816aba3e25717850c26c9cd0d89d");

        KeyImpl recreatedGUID = (KeyImpl) GUIDFactory.recreateGUID("SHA1:16:a9993e364706816aba3e25717850c26c9cd0d89d");
        assertEquals(recreatedGUID.toString(), "a9993e364706816aba3e25717850c26c9cd0d89d");
    }

    @Test
    public void shaBase_64() throws GUIDGenerationException {

        IGUID guid = (KeyImpl) SHAKeyFactory.generateKey(ALGORITHM.SHA1, "abc".getBytes());
        assertEquals(guid.toString(BASE.BASE_64), "qZk+NkcGgWq6PiVxeFDCbJzQ2J0=");

        KeyImpl recreatedGUID = (KeyImpl) GUIDFactory.recreateGUID("SHA1:64:qZk+NkcGgWq6PiVxeFDCbJzQ2J0=");
        assertEquals(recreatedGUID.toString(BASE.BASE_64), "qZk+NkcGgWq6PiVxeFDCbJzQ2J0=");

    }

    @Test
    public void testGenerateKey() throws GUIDGenerationException {
        IKey k1 = SHAKeyFactory.generateKey();
        IKey k2 = SHAKeyFactory.generateKey();

        // Key generated by SHA1 from string "null".
        AssertJUnit.assertEquals("2be88ca4242c76e8253ac62474851065032d6833", k1.toString());

        // Subsequent calls should return equal but non-identical uk.ac.standrews.cs.impl.
        assertNotSame(k1, k2);
        AssertJUnit.assertEquals(0, k1.compareTo(k2));
    }

    @Test
    public void testGenerateKeyWithString() throws GUIDGenerationException {
        IKey k1 = SHAKeyFactory.generateKey(ALGORITHM.SHA1, "null");
        IKey k2 = SHAKeyFactory.generateKey(ALGORITHM.SHA1, "quick brown fox");
        IKey k3 = SHAKeyFactory.generateKey(ALGORITHM.SHA1, "quick brown fox");

        // Key generated by SHA1 from string "null".
        AssertJUnit.assertEquals("2be88ca4242c76e8253ac62474851065032d6833", k1.toString());

        // Key generated by SHA1 from string "quick brown fox".
        AssertJUnit.assertEquals("a9762606f9e33e452f06b4562e253efb6038b512", k2.toString());

        // Subsequent calls should return equal uk.ac.standrews.cs.impl.
        AssertJUnit.assertEquals(0, k2.compareTo(k3));
        assertNotEquals(0, k1.compareTo(k2));
    }

}